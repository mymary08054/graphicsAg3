#include <math.h>
#include <GL/glut.h>
#include "rayScene.h"
#include "rayCone.h"


////////////////////////
//  Ray-tracing stuff //
////////////////////////
double RayCone::intersect(Ray3D ray,RayIntersectionInfo& iInfo,double mx){
	return -1;
}

BoundingBox3D RayCone::setBoundingBox(void){
	Point3D p;
	p=Point3D(radius,height/2,radius);
	bBox=BoundingBox3D(center+p,center-p);
	return bBox;
}

//////////////////
// OpenGL stuff //
//////////////////
#define CONE_SUBDIVISIONS 32
int RayCone::drawOpenGL(int materialIndex){
    /*int mat = material->index;
	if (mat != materialIndex)
		material->drawOpenGL();
	
	glPushMatrix();
    glTranslatef(center[0], center[1]-(height/2), center[2]);	
    glRotatef(90.0f, -1.0f, 0.0f, 0.0f); //rotate about x axis
	GLUquadricObj* quadObj = gluNewQuadric();
	gluCylinder(quadObj, radius, 0, height, CONE_SUBDIVISIONS, CONE_SUBDIVISIONS);
    glRotatef(180.0f, 1.0f, 0.0f, 0.0f);
    gluDisk(quadObj, 0.0f, radius, 30, 1);
    gluDeleteQuadric(quadObj);
    glPopMatrix();	
	return mat;*/
	glEnable(GL_BLEND);
glBlendFunc(GL_SRC_ALPHA,GL_ONE);
int m = material->index;
if (m != materialIndex) {
    material->drawOpenGL();
}

glTranslatef(-center[0], -center[1], -center[2]);

glBegin(GL_POLYGON);
GLUquadricObj *obj = gluNewQuadric();
gluCylinder(obj, this->radius, 0, this->height, 360, 360);
glEnd();
glDisable(GL_BLEND);

return m;
}
