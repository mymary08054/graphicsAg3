    Point3D    u, v, n;              // triangle vectors
    Point3D    dir, w0, w;           // ray vectors
    Point3D I;
    float     r, a, b;              // params to calc ray-plane intersect

    // get triangle edge vectors and plane normal
    u = this->v[1]->position - this->v[0]->position;
    v = this->v[2]->position - this->v[0]->position;
    n = u.crossProduct(v);              // cross product
    //if (n == (Point3D)0)             // triangle is degenerate
       // return -1;                  // triangle is degenerate (a segment or point)

    dir = ray.direction;              // ray direction vector
    w0 = ray.position - this->v[0]->position;
    a = -n.dot(w0);
    b = n.dot(dir);
    if (fabs(b) < SMALL_NUM) {     // ray is  parallel to triangle plane
        if (a == 0)                 // ray lies in triangle plane
            return 1;
        else return -1;              // ray disjoint from plane
    }

    // get intersect point of ray with triangle plane
    r = a / b;
    if (r < 0.0)                    // ray goes away from triangle
        return -1;                   // => no intersect
    // for a segment, also test if (r > 1.0) => no intersect

    I = ray.position + dir * r;            // intersect point of ray and plane

    // is I inside T?
    float    uu, uv, vv, wu, wv, D;
    uu = u.dot(u);
    uv = u.dot(v);
    vv = v.dot(v);
    w = I - this->v[0]->position;
    wu = w.dot(u);
    wv = w.dot(v);
    D = uv * uv - uu * vv;

    // get and test parametric coords
    float s, t;
    s = (uv * wv - vv * wu) / D;
    if (s < 0.0 || s > 1.0)         // I is outside T
        return -1;
        
    t = (uv * wu - uu * wv) / D;
    if (t < 0.0 || (s + t) > 1.0)  // I is outside T
        return -1;

    //return 1;                       // I is in T

return -1;
